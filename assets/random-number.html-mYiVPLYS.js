import{_ as a,c as e,a as s,o as t}from"./app-Dt8Q2BcN.js";const c={};function p(l,n){return t(),e("div",null,n[0]||(n[0]=[s(`<h1 id="随机数" tabindex="-1"><a class="header-anchor" href="#随机数"><span>随机数</span></a></h1><p>本节我们讨论一个非常重要的元素 —— 随机数。</p><p>在虚拟世界的很多场景中都需要引入随机数，来让未来变得不可琢磨，激起我们探索的欲望。</p><blockquote><p>想象你在玩游戏的时候，是不是每局都不尽相同呢？</p></blockquote><p>那请问在<code>Solidity</code>里该如何生成随机数呢？</p><h2 id="keccak256" tabindex="-1"><a class="header-anchor" href="#keccak256"><span>keccak256</span></a></h2><p>在<code>Solidity</code>中最好的随机数生成器是<code>keccak256</code></p><p>我们可以通过如下代码生成0-100随机数：</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token comment">// 1、使用 keccak256 计算 now 时间戳的哈希值</span></span>
<span class="line"><span class="token comment">// 2、转换成 uint 类型</span></span>
<span class="line"><span class="token comment">// 3、对 100 取余</span></span>
<span class="line"><span class="token builtin">uint</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安全性分析" tabindex="-1"><a class="header-anchor" href="#安全性分析"><span>安全性分析</span></a></h2><p>理想情况中，调用方会将执行智能合约的事务广播到以太坊网络中，</p><p>当已收集该事务的某一节点顺利的解决难题，发布区块时，智能合约事务执行结果也将尘埃落定。</p><p>但存在这样一种攻击的方式，</p><p>攻击者在隔离节点上执行智能合约并根据结果选择是否进行广播（解除隔离）</p><ol><li>如果执行结果对攻击者有利则尝试解决难题，当难题解决后发布区块进行广播</li><li>如果执行结果对攻击者不利则重置状态到执行智能合约前</li></ol><p>如此一来，便可以间接控制随机数为攻击者所用！🦹</p><p>所以<a href="#keccak256">上面的方法</a>实际上非常的<strong>不安全</strong></p><p>但因为解决难题的几率非常小，所以除非攻击的回报非常丰厚，</p><p>否则攻击者不会采用这种方式进行攻击。</p><h2 id="拓展知识" tabindex="-1"><a class="header-anchor" href="#拓展知识"><span>拓展知识</span></a></h2><p>话说回来，</p><p>到底是否存在在智能合约中安全生成随机数的方法呢？</p><p>答案是肯定的，</p><p>尽管困难，人们还是讨论出了<a href="https://ethereum.stackexchange.com/questions/191/how-can-i-securely-generate-a-random-number-in-my-smart-contract" target="_blank" rel="noopener noreferrer">一些办法</a> 。</p>`,24)]))}const o=a(c,[["render",p],["__file","random-number.html.vue"]]),r=JSON.parse('{"path":"/random-number.html","title":"随机数","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"keccak256","slug":"keccak256","link":"#keccak256","children":[]},{"level":2,"title":"安全性分析","slug":"安全性分析","link":"#安全性分析","children":[]},{"level":2,"title":"拓展知识","slug":"拓展知识","link":"#拓展知识","children":[]}],"git":{"updatedTime":1734842645000,"contributors":[{"name":"Ethan S. Chen","username":"Ethan S. Chen","email":"ethanschen@163.com","commits":1,"url":"https://github.com/Ethan S. Chen"}]},"filePathRelative":"random-number.md"}');export{o as comp,r as data};
