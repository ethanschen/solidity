import{_ as n,o as a,c as s,e}from"./app-97e6715c.js";const t={},p=e(`<h1 id="payable-修饰符" tabindex="-1"><a class="header-anchor" href="#payable-修饰符" aria-hidden="true">#</a> payable 修饰符</h1><p><code>payable</code>方法是让<code>Solidity</code>和以太坊变得如此酷的一部分 -- 它们是一种可以接受以太的特殊函数。</p><p>先放一下。当你在调用一个普通网站服务器上的API函数时候，你无法用你的函数传送美元 -- 你也不能传送比特币。</p><p>但是在以太坊中，因为钱（<em>以太</em>），数据（事务负载），以及合约代码本身都存在于以太坊。你可以在同时调用函数并付钱给另外一个合约。</p><p>这就允许出现很多有趣的逻辑，比如向一个合约要求支付一定的钱来运行一个函数。</p><h2 id="来看个例子" tabindex="-1"><a class="header-anchor" href="#来看个例子" aria-hidden="true">#</a> 来看个例子</h2><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">contract</span> <span class="token class-name">OnlineStore</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">buySomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检查以确定0.001以太发送出去来运行函数</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0.001</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果为真，一些用来向函数调用者发送数字内容的逻辑</span>
    <span class="token function">transferThing</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>msg.value</code>是一种可以查看向合约发送了多少以太的方法，另外<code>ether</code>是一个内建单元。</p><p>这里发生的事是，一些人会从<code>web3.js</code>调用这个函数（从<code>DApp</code>的前端），像这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 假设 \`OnlineStore\` 在以太坊上指向你的合约：</span>
OnlineStore<span class="token punctuation">.</span><span class="token function">buySomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>from<span class="token operator">:</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>defaultAccount<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> web3<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这个<code>value</code>字段，<code>JavaScript</code>调用来指定发送多少（<code>0.001</code>）以太。如果把事务想象成一个信封，你发送到函数的参数就是信的内容。添加一个<code>value</code>很像在信封里面放钱 -- 信件内容和钱同时发送给了接收者。</p><blockquote><p>注意：如果一个函数没标记为<code>payable</code>，而你尝试利用上面的方法发送以太，函数将拒绝你的事务。</p></blockquote>`,12),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","Chapter-1_Payable.html.vue"]]);export{d as default};
